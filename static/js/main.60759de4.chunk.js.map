{"version":3,"sources":["components/ForecastTable/ForecastTableCell/index.js","mockedData/localization.uk.js","mockedData/localization.ru.js","components/ForecastTable/index.js","actions/index.js","components/App.js","serviceWorker.js","reducers/index.js","store.js","index.js"],"names":["props","cellData","header","mainTitle","citySearch","city","inputPH","searchBtn","main","weatherTable","day","time","cloudness","weather","temp","pressure","wind","speed","direction","ForecastTable","state","localization","isLocalizationRu","localizationRu","localizationUk","date","Date","weatherData","this","console","log","list","className","map","elem","formattedDate","getFormattedDate","dt_txt","getDate","getMonth","key","dt","getHours","scope","clouds","all","currentUrl","icon","alt","title","src","description","toFixed","deg","React","Component","addWeatherData","type","payload","App","searchInputData","getWeatherForecastForCity","bind","getWeatherForecastForCityByEnterKey","putSearchInputToState","changeLocalization","e","keyCode","fetch","then","response","ok","Error","statusText","json","data","catch","err","setState","target","value","htmlFor","placeholder","onChange","onKeyUp","onClick","name","connect","dispatch","bindActionCreators","Boolean","window","location","hostname","match","reducer","action","enhancers","compose","devToolsExtension","f","createStore","allReducers","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVAGe,G,YAAA,SAACA,GAAW,IACjBC,EAAaD,EAAbC,SACR,OACE,4BACGA,KCPQ,GACbC,OAAQ,CACNC,UAAW,mBACXC,WAAY,CACVC,KAAM,YACNC,QAAS,iBACTC,UAAW,UAGfC,KAAM,CACJL,UAAW,aACXM,aAAc,CACZC,IAAK,kBACLC,KAAM,aACNC,UAAW,gBACXC,QAAS,qBACTC,KAAM,sBACNC,SAAU,kBACVC,KAAM,CACJC,MAAO,qBACPC,UAAW,gBCpBJ,GACbhB,OAAQ,CACNC,UAAW,kFACXC,WAAY,CACVC,KAAM,iCACNC,QAAS,iDACTC,UAAW,mCAGfC,KAAM,CACJL,UAAW,+CACXM,aAAc,CACZC,IAAK,gEACLC,KAAM,4EACNC,UAAW,2CACXC,QAAS,wCACTC,KAAM,6EACNC,SAAU,0FACVC,KAAM,CACJC,MAAO,kDACPC,UAAW,wGCsFJC,E,YAnGb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,CACXC,aAAcrB,EAAMsB,iBAAmBC,EAAiBC,GAHzC,E,8EAOFC,GACf,OAAO,IAAIC,KAAKD,K,+BAGR,IAAD,OACCE,EAAgBC,KAAK5B,MAArB2B,YAER,GADAE,QAAQC,IAAIH,IACPA,IAAgBA,EAAYI,KAAQ,OAAO,KAHzC,IAKCV,EAAiBO,KAAKR,MAAtBC,aACR,OACE,2BAAOW,UAAU,iCACf,+BACE,4BACE,4BAAKX,EAAab,KAAKC,aAAaC,KACnCiB,EAAYI,KAAKE,KAAI,SAACC,GACrB,IAAMC,EAAgB,EAAKC,iBAAiBF,EAAKG,QAC3CpC,EAAQ,UAAMkC,EAAcG,UAApB,YAAiCH,EAAcI,WAAa,GAC1E,OAAO,kBAAC,EAAD,CAAmBC,IAAKN,EAAKO,GAAIxC,SAAUA,QAGtD,4BACE,4BAAKoB,EAAab,KAAKC,aAAaE,MACnCgB,EAAYI,KAAKE,KAAI,SAACC,GACrB,IAAMC,EAAgB,EAAKC,iBAAiBF,EAAKG,QAC3CpC,EAAQ,UAAMkC,EAAcO,YAClC,OAAO,kBAAC,EAAD,CAAmBF,IAAKN,EAAKO,GAAIxC,SAAUA,SAIxD,+BACE,4BACE,wBAAI0C,MAAM,OAAOtB,EAAab,KAAKC,aAAaG,WAC/Ce,EAAYI,KAAKE,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CAAmBM,IAAKN,EAAKO,GAAIxC,SAAUiC,EAAKU,OAAOC,UAG3D,4BACE,wBAAIF,MAAM,OAAV,YACChB,EAAYI,KAAKE,KAAI,SAACC,GACrB,IAAMY,EAAU,2CAAuCZ,EAAKrB,QAAQ,GAAGkC,KAAvD,WAChB,OACE,kBAAC,EAAD,CACEP,IAAKN,EAAKO,GACVxC,SAAU,CAAC,yBACTuC,IAAKN,EAAKO,GACVO,IAAG,UAAKd,EAAKU,OAAOC,IAAjB,MACHI,MAAK,UAAKf,EAAKU,OAAOC,IAAjB,MACLb,UAAU,kBACVkB,IAAKJ,WAOf,4BACE,wBAAIH,MAAM,OAAOtB,EAAab,KAAKC,aAAaI,SAC/Cc,EAAYI,KAAKE,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CAAmBM,IAAKN,EAAKO,GAAIxC,SAAUiC,EAAKrB,QAAQ,GAAGsC,kBAG/D,4BACE,wBAAIR,MAAM,OAAOtB,EAAab,KAAKC,aAAaK,MAC/Ca,EAAYI,KAAKE,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CAAmBM,IAAKN,EAAKO,GAAIxC,UAAWiC,EAAK1B,KAAKM,KAAO,KAAKsC,QAAQ,SAG9E,4BACE,wBAAIT,MAAM,OAAOtB,EAAab,KAAKC,aAAaM,UAC/CY,EAAYI,KAAKE,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CAAmBM,IAAKN,EAAKO,GAAIxC,UAAgC,IAArBiC,EAAK1B,KAAKO,UAAiBqC,QAAQ,SAGnF,4BACE,wBAAIT,MAAM,OAAOtB,EAAab,KAAKC,aAAaO,KAAKC,OACpDU,EAAYI,KAAKE,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CAAmBM,IAAKN,EAAKO,GAAIxC,SAAUiC,EAAKlB,KAAKC,YAGzD,4BACE,wBAAI0B,MAAM,OAAOtB,EAAab,KAAKC,aAAaO,KAAKE,WACpDS,EAAYI,KAAKE,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CAAmBM,IAAKN,EAAKO,GAAIxC,SAAUiC,EAAKlB,KAAKqC,gB,GA3FvCC,IAAMC,WCNrBC,EAAiB,SAAA7B,GAAW,MAAK,CAC5C8B,KAAM,mBACNC,QAAS,CAAE/B,iBCOPgC,E,YACJ,aAAe,IAAD,8BACZ,+CACKvC,MAAQ,CACXO,YAAa,KACbiC,gBAAiB,KACjBtC,kBAAkB,EAClBD,aAAc,EAAKC,iBAAmBC,EAAiBC,GAEzD,EAAKqC,0BAA4B,EAAKA,0BAA0BC,KAA/B,gBACjC,EAAKC,oCAAsC,EAAKA,oCAAoCD,KAAzC,gBAC3C,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAC7B,EAAKG,mBAAqB,EAAKA,mBAAmBH,KAAxB,gBAXd,E,iGAcsBI,GAChB,KAAdA,EAAEC,SACJvC,KAAKiC,8B,kDAIoB,IACnBD,EAAoBhC,KAAKR,MAAzBwC,gBACAJ,EAAmB5B,KAAK5B,MAAxBwD,eAERY,MAAM,sDAAD,OAAuDR,EAAvD,4CACFS,MAAK,SAACC,GACL,IAAKA,EAASC,GAAI,MAAMC,MAAMF,EAASG,YACvC,OAAOH,EAASI,UAEjBL,MAAK,SAAAM,GAAI,OAAInB,EAAemB,MAC5BC,OAAM,SAAAC,GAAG,OAAIhD,QAAQC,IAAI+C,Q,4CAGRX,GACpBtC,KAAKkD,SAAS,CACZlB,gBAAiBM,EAAEa,OAAOC,U,2CAK5BpD,KAAKkD,SAAS,CACZxD,kBAAmBM,KAAKR,MAAME,mBAEhCM,KAAKkD,SAAS,CACZzD,aAAcO,KAAKR,MAAME,iBAAmBC,EAAiBC,M,+BAIvD,IACAG,EAAgBC,KAAK5B,MAArB2B,YADD,EAEoCC,KAAKR,MAAxCC,EAFD,EAECA,aAAcC,EAFf,EAEeA,iBAEtB,OACE,yBAAKU,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,4BAAKX,EAAanB,OAAOC,YAE3B,yBAAK6B,UAAU,eACb,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,2BAA2BiD,QAAQ,eAClD,0BAAMjD,UAAU,oBAAoBX,EAAanB,OAAOE,WAAWC,OAErE,2BACEoD,KAAK,OACLzB,UAAU,eACVkD,YAAa7D,EAAanB,OAAOE,WAAWE,QAC5C6E,SAAUvD,KAAKoC,sBACfoB,QAASxD,KAAKmC,sCAEhB,yBAAK/B,UAAU,sBACb,4BACEA,UAAU,uCACVyB,KAAK,SACL4B,QAASzD,KAAKiC,2BAEbxC,EAAanB,OAAOE,WAAWG,aAItC,4BACEkD,KAAK,SACLzB,UAAU,uCACVqD,QAASzD,KAAKqC,oBAEb3C,EAAmB,KAAO,UAMrC,8BACE,yBAAKU,UAAU,uCACb,yBAAKA,UAAU,OACb,4BAAKL,EAAW,qBAAiBA,EAAYtB,KAAKiF,MAAS,uDAE7D,yBAAKtD,UAAU,qBACb,kBAAC,EAAD,CAAeL,YAAaA,EAAaL,iBAAkBA,OAIjE,sC,GAxGUgC,IAAMC,WAwHTgC,mBAVf,SAAyBnE,GACvB,MAAO,CACLO,YAAaP,EAAMO,gBAIvB,SAA8B6D,GAC5B,OAAOC,YAAmB,CAAEjC,kBAAkBgC,KAGjCD,CAA+C5B,GCnH1C+B,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2D,qlBCpBN,IAUeC,EAVC,WAAyB,IAAxB3E,EAAuB,uDAAf,GAAI4E,EAAW,uCACtC,OAAQA,EAAOvC,MACb,IAAK,mBACH,OAAO,EAAP,GAAYrC,EAAZ,CAAmBO,YAAaqE,EAAOtC,QAAQ/B,cAEjD,QACE,OAAOP,ICHP6E,EAAYC,YAChBP,OAAOQ,kBAAoBR,OAAOQ,oBAAsB,SAAAC,GAAC,OAAIA,IAKhDC,cAAYC,EAFN,GAEiCL,GCDtDM,IAASC,OAAO,kBAAC,IAAD,CAAUC,MAAOA,GAAO,kBAAC,EAAD,OAAoBC,SAASC,eAAe,SH2H9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAC0C,GAClCA,EAAaC,kB","file":"static/js/main.60759de4.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nexport default (props) => {\n  const { cellData } = props;\n  return (\n    <td>\n      {cellData}\n    </td>\n  );\n};\n","export default {\r\n  header: {\r\n    mainTitle: 'Weather Forecast',\r\n    citySearch: {\r\n      city: 'Your city',\r\n      inputPH: 'Weather in ...',\r\n      searchBtn: 'Check',\r\n    },\r\n  },\r\n  main: {\r\n    mainTitle: 'Weather in',\r\n    weatherTable: {\r\n      day: 'Day of the week',\r\n      time: 'Local time',\r\n      cloudness: 'Cloudness, %:',\r\n      weather: 'Weather phenomena:',\r\n      temp: 'Temperature, °C:',\r\n      pressure: 'Pressure, mmHg:',\r\n      wind: {\r\n        speed: 'Wind: speed , m/s:',\r\n        direction: 'Direction',\r\n      },\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  header: {\r\n    mainTitle: 'Прогноз погоды',\r\n    citySearch: {\r\n      city: 'Город',\r\n      inputPH: 'Погода в...',\r\n      searchBtn: 'Поиск',\r\n    },\r\n  },\r\n  main: {\r\n    mainTitle: 'Погода в ',\r\n    weatherTable: {\r\n      day: 'День недели',\r\n      time: 'Местное время',\r\n      cloudness: 'Облака, %:',\r\n      weather: 'Погода:',\r\n      temp: 'Температура, °C:',\r\n      pressure: 'Давление, ммРтСт:',\r\n      wind: {\r\n        speed: 'Ветер , м/с:',\r\n        direction: 'Направление ветра',\r\n      },\r\n    },\r\n  },\r\n};\r\n","import React from 'react';\r\nimport './index.css';\r\nimport ForecastTableCell from './ForecastTableCell';\r\nimport localizationUk from '../../mockedData/localization.uk';\r\nimport localizationRu from '../../mockedData/localization.ru';\r\n\r\nclass ForecastTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      localization: props.isLocalizationRu ? localizationRu : localizationUk,\r\n    };\r\n  }\r\n\r\n  getFormattedDate(date) {\r\n    return new Date(date);\r\n  }\r\n\r\n  render() {\r\n    const { weatherData } = this.props;\r\n    console.log(weatherData);\r\n    if (!weatherData || !weatherData.list) { return null; }\r\n\r\n    const { localization } = this.state;\r\n    return (\r\n      <table className=\"table table-sm forecast-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>{localization.main.weatherTable.day}</th>\r\n            {weatherData.list.map((elem) => {\r\n              const formattedDate = this.getFormattedDate(elem.dt_txt);\r\n              const cellData = `${formattedDate.getDate()}/${formattedDate.getMonth() + 1}`;\r\n              return <ForecastTableCell key={elem.dt} cellData={cellData} />;\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <th>{localization.main.weatherTable.time}</th>\r\n            {weatherData.list.map((elem) => {\r\n              const formattedDate = this.getFormattedDate(elem.dt_txt);\r\n              const cellData = `${formattedDate.getHours()}`;\r\n              return <ForecastTableCell key={elem.dt} cellData={cellData} />;\r\n            })}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th scope=\"row\">{localization.main.weatherTable.cloudness}</th>\r\n            {weatherData.list.map(elem => (\r\n              <ForecastTableCell key={elem.dt} cellData={elem.clouds.all} />\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">Picture:</th>\r\n            {weatherData.list.map((elem) => {\r\n              const currentUrl = `http://openweathermap.org/img/wn/${elem.weather[0].icon}@2x.png`;\r\n              return (\r\n                <ForecastTableCell\r\n                  key={elem.dt}\r\n                  cellData={[<img\r\n                    key={elem.dt}\r\n                    alt={`${elem.clouds.all} %`}\r\n                    title={`${elem.clouds.all} %`}\r\n                    className=\"weather-picture\"\r\n                    src={currentUrl}\r\n                  />]}\r\n                />\r\n              );\r\n            })}\r\n          </tr>\r\n\r\n          <tr>\r\n            <th scope=\"row\">{localization.main.weatherTable.weather}</th>\r\n            {weatherData.list.map(elem => (\r\n              <ForecastTableCell key={elem.dt} cellData={elem.weather[0].description} />\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">{localization.main.weatherTable.temp}</th>\r\n            {weatherData.list.map(elem => (\r\n              <ForecastTableCell key={elem.dt} cellData={(elem.main.temp - 275).toFixed(1)} />\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">{localization.main.weatherTable.pressure}</th>\r\n            {weatherData.list.map(elem => (\r\n              <ForecastTableCell key={elem.dt} cellData={(elem.main.pressure * 0.75).toFixed(0)} />\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">{localization.main.weatherTable.wind.speed}</th>\r\n            {weatherData.list.map(elem => (\r\n              <ForecastTableCell key={elem.dt} cellData={elem.wind.speed} />\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">{localization.main.weatherTable.wind.direction}</th>\r\n            {weatherData.list.map(elem => (\r\n              <ForecastTableCell key={elem.dt} cellData={elem.wind.deg} />\r\n            ))}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ForecastTable;\r\n","export const addWeatherData = weatherData => ({\r\n  type: 'ADD_WEATHER_DATA',\r\n  payload: { weatherData },\r\n});\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ForecastTable from './ForecastTable';\r\nimport localizationUk from '../mockedData/localization.uk';\r\nimport localizationRu from '../mockedData/localization.ru';\r\nimport { addWeatherData } from '../actions';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      weatherData: null,\r\n      searchInputData: null,\r\n      isLocalizationRu: true,\r\n      localization: this.isLocalizationRu ? localizationRu : localizationUk,\r\n    };\r\n    this.getWeatherForecastForCity = this.getWeatherForecastForCity.bind(this);\r\n    this.getWeatherForecastForCityByEnterKey = this.getWeatherForecastForCityByEnterKey.bind(this);\r\n    this.putSearchInputToState = this.putSearchInputToState.bind(this);\r\n    this.changeLocalization = this.changeLocalization.bind(this);\r\n  }\r\n\r\n  getWeatherForecastForCityByEnterKey(e) {\r\n    if (e.keyCode === 13) {\r\n      this.getWeatherForecastForCity();\r\n    }\r\n  }\r\n\r\n  getWeatherForecastForCity() {\r\n    const { searchInputData } = this.state;\r\n    const { addWeatherData } = this.props;\r\n\r\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${searchInputData}&APPID=4f4b3160aa3de4b2694f8fed4974f97c`)\r\n      .then((response) => {\r\n        if (!response.ok) throw Error(response.statusText);\r\n        return response.json();\r\n      })\r\n      .then(data => addWeatherData(data))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  putSearchInputToState(e) {\r\n    this.setState({\r\n      searchInputData: e.target.value,\r\n    });\r\n  }\r\n\r\n  changeLocalization() {\r\n    this.setState({\r\n      isLocalizationRu: !this.state.isLocalizationRu,\r\n    });\r\n    this.setState({\r\n      localization: this.state.isLocalizationRu ? localizationRu : localizationUk,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { weatherData } = this.props;\r\n    const { localization, isLocalizationRu } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"container mt-4 mb-3\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md\">\r\n                <h1>{localization.header.mainTitle}</h1>\r\n              </div>\r\n              <div className=\"col-md mt-2\">\r\n                <div className=\"input-group mb-3\">\r\n                  <label className=\"input-group-prepend mb-0\" htmlFor=\"searchInput\">\r\n                    <span className=\"input-group-text\">{localization.header.citySearch.city}</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={localization.header.citySearch.inputPH}\r\n                    onChange={this.putSearchInputToState}\r\n                    onKeyUp={this.getWeatherForecastForCityByEnterKey}\r\n                  />\r\n                  <div className=\"input-group-append\">\r\n                    <button\r\n                      className=\"btn btn-outline-secondary text-light\"\r\n                      type=\"button\"\r\n                      onClick={this.getWeatherForecastForCity}\r\n                    >\r\n                      {localization.header.citySearch.searchBtn}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary text-light\"\r\n                  onClick={this.changeLocalization}\r\n                >\r\n                  {isLocalizationRu ? 'RU' : 'UK'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <main>\r\n          <div className=\"container-fluid pr-4 pl-4 mt-4 mb-3\">\r\n            <div className=\"row\">\r\n              <h2>{weatherData ? `Weather in ${weatherData.city.name}` : 'Not found. Looks like you entered wrong city name.'}</h2>\r\n            </div>\r\n            <div className=\"row overflow-auto\">\r\n              <ForecastTable weatherData={weatherData} isLocalizationRu={isLocalizationRu} />\r\n            </div>\r\n          </div>\r\n        </main>\r\n        <footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    weatherData: state.weatherData,\r\n  };\r\n}\r\n\r\nfunction matchDispatchToProps(dispatch) {\r\n  return bindActionCreators({ addWeatherData }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(App);\r\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","const reducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_WEATHER_DATA':\r\n      return { ...state, weatherData: action.payload.weatherData };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, compose } from 'redux';\r\nimport allReducers from './reducers';\r\n\r\nconst enhancers = compose(\r\n  window.devToolsExtension ? window.devToolsExtension() : f => f,\r\n);\r\n\r\nconst defaultState = {};\r\n\r\nexport default createStore(allReducers, defaultState, enhancers);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './store';\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}